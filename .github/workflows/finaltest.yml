name: UTs and ITs
on:
  push:
  pull_request:
jobs:
  test:
    runs-on: ubuntu-latest
    env:
      JWT_SECRET: ${{ secrets.JWT_SECRET }}
      DB_HOST: ${{ secrets.DB_HOST }}
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Start MySQL container
        run: |
          docker run -d --name mysql -p ${{ secrets.PORT }}:${{ secrets.DB_PORT }} \
            -e MYSQL_DATABASE=${{ secrets.DB_NAME }} \
            -e MYSQL_USER=${{ secrets.DB_USER }} \
            -e MYSQL_PASSWORD=${{ secrets.DB_PASS }} \
            -e MYSQL_ROOT_PASSWORD=${{ secrets.DB_PASS }} \
            mysql:8.0

      - name: Install mysql client
        run: sudo apt-get update && sudo apt-get install -y mysql-client

      - name: Wait for MySQL to be ready
        env:
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASS: ${{ secrets.DB_PASS }}
        run: |
          for i in {1..30}; do
            if mysql --protocol=tcp -h $DB_HOST -P ${{ secrets.PORT }} -u $DB_USER -p$DB_PASS -e "select 1" >/dev/null 2>&1; then
              break
            fi
            sleep 1
          done

      - name: Show databases
        env:
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASS: ${{ secrets.DB_PASS }}
        run: mysql --protocol=tcp -h $DB_HOST -P ${{ secrets.PORT }} -u $DB_USER -p$DB_PASS -e "SHOW DATABASES;"

      - name: Set up Node
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install dependencies
        run: npm install

      - name: Print sha256 of JWT_SECRET
        run: node -e "console.log(require('crypto').createHash('sha256').update(process.env.JWT_SECRET || '').digest('hex'))"

      - name: Verify JWT_SECRET is set
        run: test -n "$JWT_SECRET"

      - name: Run tests with coverage
        run: npm run test:coverage

      - name: Upload coverage report artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage

      - name: Stop MySQL container
        run: docker rm -f mysql
